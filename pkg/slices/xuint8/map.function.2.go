// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package xuint8

// ToBool maps a []Uint8 to a []Bool.
func (MapUint8) ToBool(aa []uint8, mapFn func(uint8) bool) []bool {
	bb := []bool{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToByte maps a []Uint8 to a []Byte.
func (MapUint8) ToByte(aa []uint8, mapFn func(uint8) byte) []byte {
	bb := []byte{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToComplex128 maps a []Uint8 to a []Complex128.
func (MapUint8) ToComplex128(aa []uint8, mapFn func(uint8) complex128) []complex128 {
	bb := []complex128{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToComplex64 maps a []Uint8 to a []Complex64.
func (MapUint8) ToComplex64(aa []uint8, mapFn func(uint8) complex64) []complex64 {
	bb := []complex64{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToError maps a []Uint8 to a []Error.
func (MapUint8) ToError(aa []uint8, mapFn func(uint8) error) []error {
	bb := []error{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToFloat32 maps a []Uint8 to a []Float32.
func (MapUint8) ToFloat32(aa []uint8, mapFn func(uint8) float32) []float32 {
	bb := []float32{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToFloat64 maps a []Uint8 to a []Float64.
func (MapUint8) ToFloat64(aa []uint8, mapFn func(uint8) float64) []float64 {
	bb := []float64{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToInt maps a []Uint8 to a []Int.
func (MapUint8) ToInt(aa []uint8, mapFn func(uint8) int) []int {
	bb := []int{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToInt16 maps a []Uint8 to a []Int16.
func (MapUint8) ToInt16(aa []uint8, mapFn func(uint8) int16) []int16 {
	bb := []int16{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToInt32 maps a []Uint8 to a []Int32.
func (MapUint8) ToInt32(aa []uint8, mapFn func(uint8) int32) []int32 {
	bb := []int32{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToInt64 maps a []Uint8 to a []Int64.
func (MapUint8) ToInt64(aa []uint8, mapFn func(uint8) int64) []int64 {
	bb := []int64{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToInt8 maps a []Uint8 to a []Int8.
func (MapUint8) ToInt8(aa []uint8, mapFn func(uint8) int8) []int8 {
	bb := []int8{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToRune maps a []Uint8 to a []Rune.
func (MapUint8) ToRune(aa []uint8, mapFn func(uint8) rune) []rune {
	bb := []rune{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToString maps a []Uint8 to a []String.
func (MapUint8) ToString(aa []uint8, mapFn func(uint8) string) []string {
	bb := []string{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToUint maps a []Uint8 to a []Uint.
func (MapUint8) ToUint(aa []uint8, mapFn func(uint8) uint) []uint {
	bb := []uint{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToUint16 maps a []Uint8 to a []Uint16.
func (MapUint8) ToUint16(aa []uint8, mapFn func(uint8) uint16) []uint16 {
	bb := []uint16{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToUint32 maps a []Uint8 to a []Uint32.
func (MapUint8) ToUint32(aa []uint8, mapFn func(uint8) uint32) []uint32 {
	bb := []uint32{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToUint64 maps a []Uint8 to a []Uint64.
func (MapUint8) ToUint64(aa []uint8, mapFn func(uint8) uint64) []uint64 {
	bb := []uint64{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToUint8 maps a []Uint8 to a []Uint8.
func (MapUint8) ToUint8(aa []uint8, mapFn func(uint8) uint8) []uint8 {
	bb := []uint8{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}

// ToUintptr maps a []Uint8 to a []Uintptr.
func (MapUint8) ToUintptr(aa []uint8, mapFn func(uint8) uintptr) []uintptr {
	bb := []uintptr{}
	for _, a := range aa {
		bb = append(bb, mapFn(a))
	}
	return bb
}
